{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Chat(_ref) {\n  var socket = _ref.socket,\n      username = _ref.username,\n      room = _ref.room;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentMessage = _useState2[0],\n      setCurrentMessage = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messageList = _useState4[0],\n      setMessageList = _useState4[1];\n\n  var sendMessage = function sendMessage() {\n    var messageData;\n    return _regeneratorRuntime.async(function sendMessage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(currentMessage !== \"\")) {\n              _context.next = 6;\n              break;\n            }\n\n            messageData = {\n              room: room,\n              author: username,\n              message: currentMessage,\n              time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\n            };\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(socket.emit(\"send_message\", messageData));\n\n          case 4:\n            setMessageList(function (list) {\n              return [].concat(_toConsumableArray(list), [messageData]);\n            });\n            setCurrentMessage(\"\");\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    socket.on(\"receive_message\", function (data) {\n      setMessageList(function (list) {\n        return [].concat(_toConsumableArray(list), [data]);\n      });\n    });\n  }, [socket]);\n\n  var messages = function messages(enteredText) {\n    setCurrentMessage(enteredText);\n  };\n\n  return _jsxs(View, {\n    className: \"chat-window\",\n    style: {\n      width: 300\n    },\n    children: [_jsx(View, {\n      className: \"chat-header\",\n      style: {\n        width: 300\n      },\n      children: _jsx(Text, {\n        children: \"Live Chat\"\n      })\n    }), _jsx(View, {\n      className: \"chat-body\",\n      style: {\n        marginTop: 100,\n        width: 300\n      },\n      children: _jsx(ScrollView, {\n        className: \"message-container\",\n        children: messageList.map(function (messageContent) {\n          return _jsx(View, {\n            className: \"message\",\n            id: username === messageContent.author ? \"you\" : \"other\",\n            children: _jsxs(View, {\n              children: [_jsx(View, {\n                className: \"message-content\",\n                children: _jsx(Text, {\n                  children: messageContent.message\n                })\n              }), _jsxs(View, {\n                className: \"message-meta\",\n                children: [_jsx(Text, {\n                  id: \"time\",\n                  children: messageContent.time\n                }), _jsx(Text, {\n                  id: \"author\",\n                  children: messageContent.author\n                })]\n              })]\n            })\n          });\n        })\n      })\n    }), _jsxs(View, {\n      className: \"chat-footer\",\n      children: [_jsx(TextInput, {\n        type: \"text\",\n        value: currentMessage,\n        placeholder: \"Hey...\",\n        onChangeText: messages,\n        onKeypress: function onKeypress(event) {\n          event.key === \"Enter\" && sendMessage();\n        }\n      }), _jsx(Button, {\n        onPress: sendMessage,\n        title: \"Send\"\n      })]\n    })]\n  });\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/ramizregat/asac/401/test/chatReactNativeTest/src/chat.js"],"names":["React","useEffect","useState","Chat","socket","username","room","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","author","message","time","Date","now","getHours","getMinutes","emit","list","on","data","messages","enteredText","width","marginTop","map","messageContent","event","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Text, View, ScrollView, Button, TextInput } from 'react-native';\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time:\n          new Date(Date.now()).getHours() +\n          \":\" +\n          new Date(Date.now()).getMinutes(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n  }, [socket]);\n\n  const messages = (enteredText) => {\n    setCurrentMessage(enteredText);\n  };\n\n  return (\n    <View className=\"chat-window\" style={{width:300}}>\n      <View className=\"chat-header\" style={{width:300}}>\n        <Text>Live Chat</Text>\n      </View>\n      <View className=\"chat-body\" style={{marginTop:100, width:300}}>\n        <ScrollView  className=\"message-container\">\n          {messageList.map((messageContent) => {\n            return (\n              <View\n                className=\"message\"\n                id={username === messageContent.author ? \"you\" : \"other\"}\n              >\n                <View>\n                  <View className=\"message-content\">\n                    <Text>{messageContent.message}</Text>\n                  </View>\n                  <View className=\"message-meta\">\n                    <Text id=\"time\">{messageContent.time}</Text>\n                    <Text id=\"author\">{messageContent.author}</Text>\n                  </View>\n                </View>\n              </View>\n            );\n          })}\n        </ScrollView >\n      </View>\n      <View className=\"chat-footer\">\n        <TextInput\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Hey...\"\n          onChangeText={messages}\n          onKeypress={(event) => {\n            event.key === \"Enter\" && sendMessage();\n          }}\n        />\n        <Button onPress={sendMessage} title='Send'/>\n      </View>\n    </View>\n  );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}